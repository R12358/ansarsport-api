// Prisma Schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:%5EZsmvAM5aTj%26eV%29G@171.22.25.192:5432/ansarsport?schema=public"
}

enum Role {
  ADMIN
  WRITER
  MANAGER
  MEMBER
}

enum AgeGroup {
  NOBAVEGAN
  NONEHALAN
  NOJAVANAN
  JAVANAN
  BOZORGSALAN
  OMID
  KADRE_FANNI
}

enum MatchType {
  PREVIOUS
  UPCOMING
}

model User {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String    @unique
  phoneNumber String?   @unique
  address     String?
  password    String
  role        Role
  avatarUrl   String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?   
  lastLogin   DateTime?

  member      Member?   @relation("UserToMember")

  @@index([deletedAt])
  @@map("users")
}

model Member {
  id             Int         @id @default(autoincrement())
  jerseyNumber   Int?
  ageGroup       AgeGroup?
  position       Position?   
  user           User        @relation("UserToMember", fields: [userId], references: [id])
  userId         Int         @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deletedAt      DateTime?   

  @@index([deletedAt])
  @@map("members")
}

enum Position {
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  FORWARD
  WINGER
  STRIKER
  SWEEPER
  ATTACKING_MIDFIELDER
}

model News {
  id             Int          @id @default(autoincrement())
  title          String
  description    String?
  content        String
  imageUrl       String
  publishedAt    DateTime
  viewCount      Int          @default(0)
  isFeatured     Boolean      @default(false)
  isHighlighted  Boolean      @default(false)
  isTopNews      Boolean      @default(false)
  tags Tag[]                  @relation("NewsTags")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?    

  @@index([deletedAt])
  @@map("news")
}

model Tag {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  news       News[]  @relation("NewsTags")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("tags")
}

model Video {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  videoUrl       String
  thumbnailUrl   String
  publishedAt    DateTime
  viewCount      Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime? 

  @@index([deletedAt])
  @@map("videos")
}

model Gallery {
  id             Int             @id @default(autoincrement())
  title          String
  description    String?
  coverImageUrl  String?
  publishedAt    DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?       
  images         GalleryImage[]

  @@index([deletedAt])
  @@map("galleries")
}

model GalleryImage {
  id         Int       @id @default(autoincrement())
  galleryId  Int
  imageUrl   String
  caption    String?
  order      Int       @default(0)
  createdAt  DateTime  @default(now())

  gallery    Gallery   @relation(fields: [galleryId], references: [id])

  @@map("gallery_images")
}

model Slider {
  id             Int       @id @default(autoincrement())
  imageUrl       String
  linkUrl        String
  title          String?
  description    String?
  order          Int       @default(0)
  isActive       Boolean   @default(true)
  publishedAt    DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime? 

  @@map("sliders")
  @@index([deletedAt])
  @@index([order])
}

model Team {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  logoUrl      String?
  isMainTeam   Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  homeMatches  Match[]    @relation("HomeTeam")
  awayMatches  Match[]    @relation("AwayTeam")

  @@map("teams")
}

model Match {
  id           Int        @id @default(autoincrement())
  homeTeamId   Int
  awayTeamId   Int
  matchDate    DateTime
  matchType    MatchType
  homeScore    Int?
  awayScore    Int?
  location     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  homeTeam     Team       @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam     Team       @relation("AwayTeam", fields: [awayTeamId], references: [id])

  @@map("matches")
  @@index([matchDate])
}
